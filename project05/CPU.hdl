// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //need jmp
    PC(in=A, load=jmp, inc=true, reset=reset, out[0..14]=pc);
    
    //left mux
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=lMuxOut);
    
    //load A?
    Not(in=instruction[15], out=not15);
    Or(a=instruction[5], b=not15, out=loadA);
    
    //A Reg
    ARegister(in=lMuxOut, load=loadA, out=A, out[0..14]=addressM);
    
    //right mux
    Mux16(a=A, b=inM, sel=instruction[12], out=AM);
    
    //load D?
    And(a=instruction[4], b=instruction[15], out=loadD);
    
    //D Reg
    DRegister(in=aluOut, load=loadD, out=D);
    
    //ALU
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=zr, ng=ng);
    
    //Why cant I just do aluOut=outM?!?!?!?!
    And16(a=true, b=aluOut, out=outM);
    
    //decide on a jump
    Not(in=zr, out=nzr);
    Not(in=ng, out=pos);
    
    //j1
    And(a=instruction[0], b=pos, out=maybej1);
    And(a=maybej1, b=nzr, out=j1); 
    
    //j1
    And(a=instruction[1], b=zr, out=j2);
    
    //j2
    And(a=instruction[2], b=ng, out=j3);
    
    //jmp
    Or(a=j1, b=j2, out=maybejmp);
    Or(a=j3, b=maybejmp, out=jmpifc);
    And(a=jmpifc, b=instruction[15], out=jmp);
    
    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    
}
