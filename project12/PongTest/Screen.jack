/*
Screen.jack
*/
class Screen{
	/** Initializes the Screen. */
	static int screenWidth, screenHeight, screenAddress, color;
	function void init(){
		let screenWidth = 512;
		let screenHeight = 256;
		let screenAddress = 16384;
		do Screen.setColor(true);
		return;
	}
	/** Erases the whole screen. */
	function void clearScreen(){
		if(color=0){
			do Screen.colorScreen(true);
		}else{
			do Screen.colorScreen(false);
		}
		return;
	}
	function void colorScreen(int col){
		var int i, max, start;
		let max = screenWidth*(screenHeight/16);
		let i = 0;
		while(i<max){
			let screenAddress[i] = col;
			let i = i + 1;
		}
		return;
	}
	/** Sets the color to be used in further draw commands
	*  where white = false, black = true. */
	function void setColor(int b){//boolean
		let color = b;
		if(~(color=0)){//make sure it is 1
			let color = 0;
			let color = ~color;
		}
		return;
	}
	/** Draws the (x, y) pixel. */
	function void drawPixel(int x, int y){
		var int byte, mem, offset, val, i;
		do Screen.checkCoords(x,y,7);// illegal pixel coordinates
		let byte = (y*(screenWidth/16)) + (x/16);
		let offset = x - ((x/16)*16);
		let mem = byte+screenAddress;
		let val = 1;
		let i = 0;
		while(i<offset){
			let val = val+val;
			let i = i+1;
		}
		if(color=0){
			let val = ~val;
			let val = val & Memory.peek( mem );
		}else{//=1
			let val = val | Memory.peek( mem );
		}
		do Memory.poke(mem, val);
		return;
	}
	/** Draws a line from pixel (x1, y1) to (x2, y2). */
	function void drawLine(int x1, int y1, int x2, int y2){
		//var int maxX, maxY, minX, minY
		var int dx, dy, a, b, i, j;//initialy zero
		var int check, xpa, xma, ypb, ymb;//initialy zero
		var int dxdygtz, dxgtz, dygtz, dxltz, dyltz, dxeqz, dyeqz;//initially false
		var boolean case1, case2, case3, case4, flip;
		do Screen.checkCoords(x1,y1,8);// illegal line coordinates
		do Screen.checkCoords(x2,y2,8);// illegal line coordinates
		let dx = x2-x1;
		let dy = y2-y1;
		
		if( (dx>0) & (dy>0) ){
			let case1 = true;
		}
		if( (dx<0) & (dy<0) ){//flip all
			let flip = true;
			let case1 = true;
		}
		if( (dx>0) & (dy<0) ){
			let case2 = true;
		}
		if( (dx<0) & (dy>0) ){
			let flip = true;
			let case2 = true;
		}
		if( (dx=0) & (dy>0) ){
			let case3 = true;
		}
		if( (dx=0) & (dy<0) ){
			let flip = true;
			let case3 = true;
		}
		if( (dy=0) & (dx>0) ){
			let case4 = true;
		}
		if( (dy=0) & (dx<0) ){
			let flip = true;
			let case4 = true;
		}
		if(flip){
			let dx = -dx;
			let dy = -dy;
			let i = x1;
			let x1 = x2;
			let x2 = i;
			let i = y1;
			let y1 = y2;
			let y2 = i;
		}
		//dx>0 dy>0:--------------------------- /
		//dx<0 dy<0:--------------------------- /
		if( case1 ){
			while( (~(a>dx)) & ~((b>dy)) ){
				do Screen.drawPixel(x1+a,y1+b);
				if(check<0){
					let a = a + 1;
					let check = check + dy;
				}else{
					let b = b + 1;
					let check = check - dx;
				}
			}
		}else{
		//dx>0 dy<0:--------------------------- \  
		//dx<0 dy>0:--------------------------- \  
		if( case2 ){
			while( (~(a>dx)) & ~((b<dy)) ){
				do Screen.drawPixel(x1+a,y1-b);
				if(check<0){
					let a = a + 1;
					let check = check - dy;//dy is negative
				}else{
					let b = b + 1;
					let check = check - dx;
				}
			}
		}else{
		//dx=0 dy!=0:--------------------------- |
		if( case3 ){
			while( ~(b>dy) ){
				do Screen.drawPixel(x1,y1+b);
				let b = b+1;
			}
		}else{
		//dx!=0 dy=0:--------------------------- _
		if( case4 ){
			while( ~(a>dx) ){
				do Screen.drawPixel(x1+a,y1);
				let a = a+1;
			}
		}
		}
		}
		}
		//dx=0 dy=0:--------------------------- .
		return;
	}
	/** Draws a filled rectangle where the top left corner
	*  is (x1, y1) and the bottom right corner is (x2, y2). */
	function void drawRectangle(int x1, int y1, int x2, int y2){
		do Screen.checkCoords(x1,y1,8);// illegal rectangle coordinates
		do Screen.checkCoords(x2,y2,8);// illegal rectangle coordinates
		do Screen.fillRect(x1,y1, x2,y2);
		return;
	}
	/** Draws a filled circle of radius r around (cx, cy). */
	function void drawCircle(int cx, int cy, int r){
		do Screen.fillCircle(cx,cy,r);
		return;
	}
	function void fillCircle(int x0, int y0, int r){// radius greater than ~90 will screw up  (x*x+y*y)
		var int minX, maxX, minY, maxY, x, y, len, t0, t1;
		do Screen.checkCoords(x0,y0,12);// illegal center coordinates
		if(r<0){
			do Sys.error(13);// illegal radius
		}
		
		let minX = x0 - r;
		let minY = y0 - r;
		let maxX = x0 + r;
		let maxY = y0 + r;
		let x = minX;
		while( ~(x>maxX) ){
			let y = minY;
			while( ~(y>maxY) ){
				let t0 = y-y0;
				let t0 = t0*t0;
				let t1 = x-x0;
				let t1 = t1*t1;
				let t1 = t0+t1;
				let len = Math.sqrt(t1);
				if( len<r ){
					do Screen.drawPixel(x,y);
				}
				let y = y + 1;
			}
			let x = x + 1;
		}
		return;
	}
	function void fillRect(int x0, int y0, int x1, int y1){// radius greater than ~90 will screw up  (x*x+y*y)
		var int minX, maxX, minY, maxY, x, y, len, t0, t1;
		let minX = Math.min( x0, x1 );
		let minY = Math.min( y0, y1 );
		let maxX = Math.max( x0, x1 );
		let maxY = Math.max( y0, y1 );
		let x = minX;
		while( ~(x>maxX) ){
			let y = minY;
			while( ~(y>maxY) ){
				do Screen.drawPixel(x,y);
				let y = y + 1;
			}
			let x = x + 1;
		}
		return;
	}
	function void checkCoords(int x, int y, int err){
		if(( (~(x<screenWidth))|(x<0) )|( (~(y<screenHeight))|(y<0) )){
			do Sys.error(err);
		}
		return;
	}
}

