/*
 * This class maintains the character's position and facing direction.  This 
 * class also handles the movement of the character (forwards, backwards, 
 * rotate clockwise, and rotate counter-clockwise)
 */
class Character {

	/* ---------- Variables ---------- */
	field Grid world;
	
	// Character information
	field V2D pos;		// world coords of character
	field V2D gridNum;	// which grid you are in
	field V2D direction;	// (0,1) would be north, (1,0) would be east...

	constructor Character new(Grid w) {
		let world = w;
		let pos = V2D.new(Grid.getGridSize()/2, Grid.getGridSize()/2);
		let gridNum = V2D.new(w.getSizeX(), w.getSizeY());
		let direction = V2D.new(0,1);
		return this;
	}

	method void dispose() {
		do world.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method boolean verifyMove(int x, int y) {
		var boolean canMove;
		let canMove = false;
		if (y = 1) {
			// move forwards (North)
			let canMove = ~world.hasNorthWall(gridNum.getX(), gridNum.getY());
		}
		if (y = -1) {
			// move backwards (South)
			let canMove = ~world.hasSouthWall(gridNum.getX(), gridNum.getY());
		}
		if (x = -1) {
			// move counter-clockwise (West)
			let canMove = ~world.hasWestWall(gridNum.getX(), gridNum.getY());
		}
		if (x = 1) {
			// move clockwise (East)
			let canMove = ~world.hasEastWall(gridNum.getX(), gridNum.getY());
		}
		return canMove;
	}
	
	/**
	Checks if the character is about to switch tiles.
	*/
	method boolean switchingTiles()
	{
		var V2D soonToBePos;
		var V2D soonToBeGridNum;
		var boolean switching;
		var int xmove;
		var int ymove;
		
		let switching = false;
		
		let soonToBePos = V2D.empty();
		
		let gridNum = Grid.coordTransform(pos);
		
		do V2D.add(pos, direction, soonToBePos);
		
		let soonToBeGridNum = Grid.coordTransform(soonToBePos);
		
		if(~(V2D.equals(gridNum, soonToBeGridNum)))
		{
			let switching = true;
			let xmove = soonToBeGridNum.getX() - gridNum.getX();
			let ymove = soonToBeGridNum.getY() - gridNum.getY();
		}
		
		return switching;
	}

	method void move(int movement) {
		var int x, y;
		let x = direction.getX();
		let y = direction.getY();

		// 0 = none, 1 = North, 2 = South, 3 = West, 4 = East
		// where West = counter-clockwise rotation
		// where East = clockwise rotation
		if (movement = 1) {
			if (verifyMove(x,y)) {
				var int px, py;
				let px = pos.getX();
				let py = pos.getY();

				pos = V2D.new((px + x),(py + y));
			}
		}
		if (movement = 2) {
			var int x2, y2;
			let x2 = -x;
			let y2 = -y;

			if (verifyMove(x2,y2)) {
				var int px, py;
				let px = pos.getX();
				let py = pos.getY();

				pos = V2D.new((px + x2),(py + y2));
			}
		}
		if (movement = 3) {
			if (x = -1) {
				if (y = -1) { direction.setX(0); }
				if (y = 0) { direction.setY(-1); }
				if (y = 1) { direction.setY(0); }
			}
			if (x = 0) {
				if (y = -1) { direction.setX(1); }
				if (y = 1) { direction.setX(-1); }
			}
			if (x = 1) {
				if (y = -1) { direction.setY(0); }
				if (y = 0) { direction.setY(1); }
				if (y = 1) { direction.setX(0); }
			}
		}
		if (movement = 4) {
			if (x = -1) {
				if (y = -1) { direction.setY(0); }
				if (y = 0) { direction.setY(1); }
				if (y = 1) { direction.setX(0); }
			}
			if (x = 0) {
				if (y = -1) { direction.setX(-1); }
				if (y = 1) { direction.setX(1); }
			}
			if (x = 1) {
				if (y = -1) { direction.setX(0); }
				if (y = 0) { direction.setY(-1); }
				if (y = 1) { direction.setY(0); }
			}
		}
		do Sys.wait(5);
		return;
	}
}
