/*
 * This class maintains the character's position and facing direction.  This 
 * class also handles the movement of the character (forwards, backwards, 
 * rotate clockwise, and rotate counter-clockwise)
 */
class Character {

	/* ---------- Variables ---------- */
	field Grid world;
	field int facing_direction; // 0 = N, 1 = E, 2 = S, 3 = W
	field int moving_direction; // 0 = N, 1 = E, 2 = S, 3 = W

	// Character information
	field int pos_x, pos_y;
	field int grid_x, grid_y;

	constructor Character new(Grid w) {
		let world = w;
		return this;
	}

	method void dispose() {
		do world.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method boolean verifyMove(int movement) {
		var boolean canMove;
		let canMove = false;
		if (movement = 1) {
			// move forwards (North)
			let canMove = ~world.hasNorthWall(grid_x, grid_y);
			
		}
		if (movement = 2) {
			// move backwards (South)
			let canMove = ~world.hasSouthWall(grid_x, grid_y);
		}
		if (movement = 3) {
			// move counter-clockwise (West)
			let canMove = ~world.hasWestWall(grid_x, grid_y);
		}
		if (movement = 4) {
			// move clockwise (East)
			let canMove = ~world.hasEastWall(grid_x, grid_y);
		}
		return canMove;
	}

	method void move(int movement) {
		
		if (verifyMove(movement)) {
		}

		do Sys.wait(5);
		return;
	}
}
