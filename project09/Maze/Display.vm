function Display.new 0
push constant 6
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
push constant 2
call Math.divide 2
pop this 4
push argument 3
push constant 2
call Math.divide 2
pop this 5
push this 0
push this 4
sub
pop this 2
push this 1
push this 5
sub
pop this 3
push this 4
push constant 2
call Math.multiply 2
pop this 4
push this 5
push constant 2
call Math.multiply 2
pop this 5
push pointer 0
return
function Display.drawBounding 0
push argument 0
pop pointer 0
push this 2
push this 3
push this 2
push this 4
add
push this 3
call Screen.drawLine 4
pop temp 0
push this 2
push this 4
add
push this 3
push this 2
push this 4
add
push this 3
push this 5
add
call Screen.drawLine 4
pop temp 0
push this 2
push this 4
add
push this 3
push this 5
add
push this 2
push this 3
push this 5
add
call Screen.drawLine 4
pop temp 0
push this 2
push this 3
push this 5
add
push this 2
push this 3
call Screen.drawLine 4
pop temp 0
push this 0
push constant 2
sub
push this 1
push this 0
push constant 2
add
push this 1
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push constant 2
add
push this 0
push this 1
push constant 2
sub
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Display.clear 0
push argument 0
pop pointer 0
push this 2
push constant 1
add
push this 3
push constant 1
add
push this 2
push this 4
add
push constant 1
sub
push this 3
push this 5
add
push constant 1
sub
push constant 0
call Display.fillRect 5
pop temp 0
push constant 0
return
function Display.render2DPoint 5
push argument 0
pop pointer 0
push argument 1
call V3D.getZ 1
push argument 2
call Cam3D.getCut 1
call Float.lt 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 1
call V3D.getX 1
push constant 0
not
call Float.toInt 2
push argument 1
call V3D.getY 1
push constant 0
not
call Float.toInt 2
call Point.new 2
pop local 4
push this 2
push this 4
add
pop local 0
push this 3
push this 5
add
pop local 2
push pointer 0
push local 4
call Display.offsetPoint 2
pop temp 0
push local 4
call Point.getX 1
push local 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 4
push local 2
call Point.setX 2
pop temp 0
label IF_FALSE1
push local 4
call Point.getX 1
push this 2
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 4
push this 2
call Point.setX 2
pop temp 0
label IF_FALSE2
push local 4
call Point.getY 1
push local 2
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 4
push local 2
call Point.setY 2
pop temp 0
label IF_FALSE3
push local 4
call Point.getY 1
push this 3
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 4
push this 3
call Point.setY 2
pop temp 0
label IF_FALSE4
push local 4
call Point.getX 1
push local 4
call Point.getY 1
push constant 2
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Display.offsetPoint 0
push argument 0
pop pointer 0
push argument 1
push argument 1
call Point.getX 1
push this 2
add
push this 4
push constant 2
call Math.divide 2
add
call Point.setX 2
pop temp 0
push argument 1
push argument 1
call Point.getY 1
neg
push this 3
add
push this 5
push constant 2
call Math.divide 2
add
call Point.setY 2
pop temp 0
push constant 0
return
function Display.print 0
push argument 0
pop pointer 0
push constant 8
call String.new 1
push constant 99
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push this 0
call Output.printInt 1
pop temp 0
push constant 2
call String.new 1
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push this 1
call Output.printInt 1
pop temp 0
push constant 12
call String.new 1
push constant 32
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 76
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 102
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push this 2
call Output.printInt 1
pop temp 0
push constant 2
call String.new 1
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push this 3
call Output.printInt 1
pop temp 0
push constant 8
call String.new 1
push constant 32
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push this 4
call Output.printInt 1
pop temp 0
push constant 2
call String.new 1
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push this 5
call Output.printInt 1
pop temp 0
call Output.println 0
pop temp 0
push constant 0
return
function Display.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Display.init 0
push constant 512
pop static 0
push constant 256
pop static 1
push constant 16384
pop static 2
push constant 16
pop static 3
push constant 0
return
function Display.V3Dto2D 4
push constant 0
push constant 0
push constant 0
call Float.new 3
pop local 1
push constant 0
push constant 0
push constant 0
call Float.new 3
pop local 2
push constant 0
push constant 0
push constant 0
call Float.new 3
pop local 3
push local 3
call Float.getZero 1
pop temp 0
push local 2
push local 2
push local 2
call V3D.new 3
pop local 0
push local 0
push argument 1
push argument 2
call M4D.mulV3D 3
pop temp 0
push local 1
push argument 3
call Cam3D.getScale 1
push argument 3
call Cam3D.getLens 1
call Float.mul 3
pop temp 0
push local 2
push argument 3
call Cam3D.getLens 1
push local 0
call V3D.getZ 1
call Float.add 3
pop temp 0
push local 1
push local 1
push local 2
call Float.div 3
pop temp 0
push local 1
push local 3
call Float.gt 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 1
call Float.negate 2
pop temp 0
label IF_FALSE0
push local 2
push local 1
push local 0
call V3D.getX 1
call Float.mul 3
pop temp 0
push local 0
push local 2
call V3D.setX 2
pop temp 0
push local 2
push local 1
push local 0
call V3D.getY 1
call Float.mul 3
pop temp 0
push local 0
push local 2
call V3D.setY 2
pop temp 0
push argument 0
push local 0
call Float.copy 2
pop temp 0
push local 0
call V3D.dispose 1
pop temp 0
push local 1
call Float.dispose 1
pop temp 0
push local 2
call Float.dispose 1
pop temp 0
push local 3
call Float.dispose 1
pop temp 0
push constant 0
return
function Display.pixelToAddress 2
push static 0
push static 3
call Math.divide 2
pop local 0
push local 0
push argument 1
call Math.multiply 2
pop local 0
push argument 0
push static 3
call Math.divide 2
pop local 1
push local 0
push local 1
add
push static 2
add
pop local 0
push local 0
return
function Display.colorPixel 6
push argument 0
push argument 1
call Display.pixelToAddress 2
pop local 0
push local 0
call Memory.peek 1
pop local 1
push static 0
push static 3
call Math.divide 2
pop local 2
push argument 0
push static 3
call Math.divide 2
call Math.abs 1
pop local 3
push local 3
push static 3
call Math.multiply 2
pop local 4
push argument 0
push local 4
sub
pop local 4
push constant 1
pop local 5
label WHILE_EXP0
push local 4
push constant 0
gt
not
if-goto WHILE_END0
push local 5
push local 5
add
pop local 5
push local 4
push constant 1
sub
pop local 4
goto WHILE_EXP0
label WHILE_END0
push argument 2
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 5
or
pop local 1
goto IF_END0
label IF_FALSE0
push local 5
not
pop local 5
push local 1
push local 5
and
pop local 1
label IF_END0
push local 0
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Display.fillScreen 3
push static 2
pop local 0
push static 0
push static 3
call Math.divide 2
pop local 1
push local 1
push static 1
call Math.multiply 2
pop local 1
push local 1
push local 0
add
pop local 1
push argument 0
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 2
push local 2
not
pop local 2
goto IF_END0
label IF_FALSE0
push constant 0
pop local 2
label IF_END0
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push local 0
push local 2
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Display.fillCircle 9
push argument 0
push argument 2
sub
pop local 0
push argument 1
push argument 2
sub
pop local 2
push argument 0
push argument 2
add
pop local 1
push argument 1
push argument 2
add
pop local 3
push local 0
pop local 4
label WHILE_EXP0
push local 4
push local 1
gt
not
not
if-goto WHILE_END0
push local 2
pop local 5
label WHILE_EXP1
push local 5
push local 3
gt
not
not
if-goto WHILE_END1
push local 5
push argument 1
sub
pop local 7
push local 7
push local 7
call Math.multiply 2
pop local 7
push local 4
push argument 0
sub
pop local 8
push local 8
push local 8
call Math.multiply 2
pop local 8
push local 7
push local 8
add
pop local 8
push local 8
call Math.sqrt 1
pop local 6
push local 6
push argument 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push local 5
push argument 3
call Display.colorPixel 3
pop temp 0
label IF_FALSE0
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP1
label WHILE_END1
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Display.fillRect 9
push argument 0
push argument 2
call Math.min 2
pop local 0
push argument 1
push argument 3
call Math.min 2
pop local 2
push argument 0
push argument 2
call Math.max 2
pop local 1
push argument 1
push argument 3
call Math.max 2
pop local 3
push local 0
pop local 4
label WHILE_EXP0
push local 4
push local 1
gt
not
not
if-goto WHILE_END0
push local 2
pop local 5
label WHILE_EXP1
push local 5
push local 3
gt
not
not
if-goto WHILE_END1
push local 4
push local 5
push argument 4
call Display.colorPixel 3
pop temp 0
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP1
label WHILE_END1
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Display.fillTri 24
push constant 1
pop local 16
push local 16
neg
pop local 17
push argument 0
push argument 2
push argument 4
call Math.min 2
call Math.min 2
pop local 0
push argument 1
push argument 3
push argument 5
call Math.min 2
call Math.min 2
pop local 2
push argument 0
push argument 2
push argument 4
call Math.max 2
call Math.max 2
pop local 1
push argument 1
push argument 3
push argument 5
call Math.max 2
call Math.max 2
pop local 3
push local 0
pop local 4
label WHILE_EXP0
push local 4
push local 1
gt
not
not
if-goto WHILE_END0
push local 2
pop local 5
label WHILE_EXP1
push local 5
push local 3
gt
not
not
if-goto WHILE_END1
push local 4
push argument 0
sub
pop local 9
push local 5
push argument 1
sub
pop local 12
push local 4
push argument 2
sub
pop local 10
push local 5
push argument 3
sub
pop local 13
push local 4
push argument 4
sub
pop local 11
push local 5
push argument 5
sub
pop local 14
push local 9
push local 13
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 6
push local 12
push local 10
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 15
push local 6
push local 15
sub
pop local 6
push local 10
push local 14
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 7
push local 13
push local 11
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 15
push local 7
push local 15
sub
pop local 7
push local 11
push local 12
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 8
push local 14
push local 9
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 15
push local 8
push local 15
sub
pop local 8
push local 6
push local 17
gt
push local 7
push local 17
gt
and
push local 8
push local 17
gt
and
push local 6
push local 16
lt
push local 7
push local 16
lt
and
push local 8
push local 16
lt
and
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push local 5
push argument 6
call Display.colorPixel 3
pop temp 0
label IF_FALSE0
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP1
label WHILE_END1
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Display.singleLine 9
push argument 3
push argument 1
sub
pop local 2
push argument 2
push argument 0
sub
pop local 3
push local 3
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 2
pop local 1
goto IF_END0
label IF_FALSE0
push local 2
push local 3
call Math.divide 2
pop local 1
label IF_END0
push local 1
call Math.abs 1
pop local 0
push local 0
push constant 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
push argument 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 2
pop local 1
push argument 0
pop argument 2
push local 1
pop argument 0
push argument 3
pop local 1
push argument 1
pop argument 3
push local 1
pop argument 1
label IF_FALSE2
push argument 1
push argument 3
sub
pop local 2
push argument 2
push argument 0
sub
pop local 3
push argument 0
push argument 3
call Math.multiply 2
pop local 1
push argument 2
push argument 1
call Math.multiply 2
pop local 7
push local 1
push local 7
sub
pop local 1
push argument 1
pop local 6
push argument 0
pop local 5
push argument 1
push argument 3
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
label WHILE_EXP0
push local 5
push argument 2
gt
not
not
if-goto WHILE_END0
push local 5
push local 6
push argument 4
call Display.colorPixel 3
pop temp 0
push local 2
push local 5
call Math.multiply 2
pop local 7
push local 3
push local 6
call Math.multiply 2
pop local 8
push local 7
push local 8
add
pop local 7
push local 7
push local 1
add
pop local 7
push local 7
push constant 0
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 6
push constant 1
sub
pop local 6
label IF_FALSE4
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP0
label WHILE_END0
goto IF_END3
label IF_FALSE3
label WHILE_EXP1
push local 5
push argument 2
gt
not
not
if-goto WHILE_END1
push local 5
push local 6
push argument 4
call Display.colorPixel 3
pop temp 0
push local 2
push local 5
call Math.multiply 2
pop local 7
push local 3
push local 6
call Math.multiply 2
pop local 8
push local 7
push local 8
add
pop local 7
push local 7
push local 1
add
pop local 7
push local 7
push constant 0
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 6
push constant 1
add
pop local 6
label IF_FALSE5
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP1
label WHILE_END1
label IF_END3
goto IF_END1
label IF_FALSE1
push argument 3
push argument 1
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push argument 2
pop local 1
push argument 0
pop argument 2
push local 1
pop argument 0
push argument 3
pop local 1
push argument 1
pop argument 3
push local 1
pop argument 1
label IF_FALSE6
push argument 1
push argument 3
sub
pop local 2
push argument 2
push argument 0
sub
pop local 3
push argument 0
push argument 3
call Math.multiply 2
pop local 1
push argument 2
push argument 1
call Math.multiply 2
pop local 7
push local 1
pop local 1
push argument 1
pop local 6
push argument 0
pop local 5
push argument 0
push argument 2
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
label WHILE_EXP2
push local 6
push argument 3
gt
not
not
if-goto WHILE_END2
push local 5
push local 6
push argument 4
call Display.colorPixel 3
pop temp 0
push local 2
push local 5
call Math.multiply 2
pop local 7
push local 3
push local 6
call Math.multiply 2
pop local 8
push local 7
push local 8
add
pop local 7
push local 7
push local 1
add
pop local 7
push local 7
push constant 0
lt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 5
push constant 1
sub
pop local 5
label IF_FALSE8
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP2
label WHILE_END2
goto IF_END7
label IF_FALSE7
label WHILE_EXP3
push local 6
push argument 3
gt
not
not
if-goto WHILE_END3
push local 5
push local 6
push argument 4
call Display.colorPixel 3
pop temp 0
push local 2
push local 5
call Math.multiply 2
pop local 7
push local 3
push local 6
call Math.multiply 2
pop local 8
push local 7
push local 8
add
pop local 7
push local 7
push local 1
add
pop local 7
push local 7
push constant 0
gt
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 5
push constant 1
add
pop local 5
label IF_FALSE9
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP3
label WHILE_END3
label IF_END7
label IF_END1
push constant 0
return
