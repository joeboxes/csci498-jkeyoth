/**
This class holds an array of Tiles that make up the maze. This class is how any other class should access the Tiles.
*/

class Grid
{
	
	field Array tiles;
	
	static int GRID_SIZE;
	
	field int sizeX, sizeY;
	
	field int goalX, goalY;
	
	/**
	Constructor for Grid
	int sx: number of tiles in grid east-west
	int sy: number of tiles in grid north-south
	int gx,gy: location of goal spot
	*/
	constructor Grid new(int sx, int sy, int gx, int gy)
	{
		let sizeX = sx;
		let sizeY = sy;
		let goalX = gx;
		let goalY = gy;
		
		let tiles = Array.new(sizeX * sizeY);
		
		//TODO: change this to something else
		let GRID_SIZE=100;
		
		return this;
	}
	
	/**
	Which directions have walls at point(x,y)
	returns a boolean array: [north,east,south,west]
	deprecating, dont use this!
	*/
	/*method Array getWalls(int x, int y)
	{
		var Tile t;
		var Array walls;
		var Tile southTile;
		var Tile eastTile;
		
		let t = tiles[y * sizeX + x];
		let walls = Array.new(4);
		let walls[0] = t.isNorthWall();
		let walls[3] = t.isWestWall();
		
		let southTile = tiles[(y+1) * sizeX + x];
		let walls[2] = southTile.isNorthWall();
		
		let eastTile = tiles[y * sizeX + x + 1];
		let walls[1] = eastTile.isWestWall();
		return walls;
	}*/
	
	/**
	Check if tile x,y has a north wall
	*/
	method boolean hasNorthWall(int x, int y)
	{
		var boolean has;
		var Tile t;
		let t = tiles[y * sizeX + x];
		let has = t.isNorthWall();
		return has;
	}

	/**
	Check if tile x,y has a west wall
	*/
	method boolean hasWestWall(int x, int y)
	{
		var boolean has;
		var Tile t;
		let t = tiles[y * sizeX + x];
		let has = t.isWestWall();
		return has;
	}

	/**
	Check if tile x,y has a south wall
	*/
	method boolean hasSouthWall(int x, int y)
	{
		var boolean has;
		var Tile t;
	
		if ((x = sizeX) & (y=sizeY))
		{
			return true;
		}
		
		
		let t = tiles[(y+1) * sizeX + x];
		let has = t.isNorthWall();
		return has;
	}

	/**
	Check if tile x,y has a east wall
	*/
	method boolean hasEastWall(int x, int y)
	{
		var boolean has;
		var Tile t;
	
		if ((x = sizeX) & (y=sizeY))
		{
			return true;
		}
		
		let t = tiles[y * sizeX + x + 1];
		let has = t.isWestWall();
		return has;
	}
	
	/**
	Used to get the array of tiles visible from tile at (x,y)
	returns Array of Tiles 
	*/
	//TODO: change void to Array
	method void canSeeFrom(int x, int y)
	{
		return;
	}
	
	/**
	Get the tile you are currently in, as an array of two numbers.
	x,y are the world coords.
	IS A STATIC FUNCT NOW
	*/
	function Array coordTransform(V2D p)
	{
		var V2D pos;
		let pos = V2D.empty();
		do pos.setX(p.getX() / GRID_SIZE);
		do pos.setY(p.getY() / GRID_SIZE);
		return pos;
	}
	
	//getters. No setter for size because the size of the maze should not change
	method int getSizeX()
	{
		return sizeX;
	}
	method int getSizeY()
	{
		return sizeY;
	}
	method int getGoalX()
	{
		return goalX;
	}
	method int getGoalY()
	{
		return goalY;
	}
	method void setGoal(int x, int y)
	{
		let goalX = x;
		let goalY = y;
		return;
	}
	
	
	//I hope this is the right way to dispose an array.
	method void dispose()
	{
		do tiles.dispose();
		do Memory.deAlloc(this);
		return;
	}
	
	function int getGridSize()
	{
		return GRID_SIZE;
	}
	
	
}
