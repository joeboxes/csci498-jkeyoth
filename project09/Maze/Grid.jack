/*
 * This class holds an array of Tiles that make up the maze.  This class is how
 * any other class should access the Tiles.
 */
class Grid {
	/*-------------------- STATIC VARIABLES --------------------*/

	/*-------------------- PRIVATE VARIABLES --------------------*/
	field Array tiles;
	static int GRID_SIZE;
	field int sizeX, sizeY;
	field int goalX, goalY;

	/*-------------------- PRIVATE METHODS --------------------*/

	/*
	 * Constructor for Grid
	 * int sx: number of tiles in grid east-west
	 * int sy: number of tiles in grid north-south
	 * int gx,gy: location of goal spot
	 */
	constructor Grid new(int sx, int sy, int gx, int gy) {
		let sizeX = sx;
		let sizeY = sy;
		let goalX = gx;
		let goalY = gy;
		
		let tiles = Array.new(sizeX * sizeY);
		
		//TODO: change this to something else
		let GRID_SIZE=100;
		
		return this;
	}
	
	/*
	 * Which walls are present at point(x,y)
	 * Returns a boolean array: [North, South, East, West]
	 */
	method Array getWalls(int x, int y) {
		var Array walls;

		let walls = Array.new(4);
		let walls[0] = hasNorthWall(x,y);
		let walls[1] = hasSouthWall(x,y);
		let walls[2] = hasEastWall(x,y);
		let walls[3] = hasWestWall(x,y);

		return walls;
	}
	
	/*
	 * Check if tile x,y has a north wall
	 */
	method boolean hasNorthWall(int x, int y) {
		var boolean has;
		var Tile t;
		let t = tiles[y * sizeX + x];
		let has = t.isNorthWall();
		return has;
	}

	/*
	 * Check if tile x,y has a west wall
	 */
	method boolean hasWestWall(int x, int y) {
		var boolean has;
		var Tile t;
		let t = tiles[y * sizeX + x];
		let has = t.isWestWall();
		return has;
	}

	/*
	 * Check if tile x,y has a south wall
	 */
	method boolean hasSouthWall(int x, int y) {
		var boolean has;
		var Tile t;
	
		if ((x = sizeX) & (y=sizeY)) {
			return true;
		}
		
		
		let t = tiles[(y+1) * sizeX + x];
		let has = t.isNorthWall();
		return has;
	}

	/*
	 * Check if tile x,y has a east wall
	 */
	method boolean hasEastWall(int x, int y) {
		var boolean has;
		var Tile t;
	
		if ((x = sizeX) & (y=sizeY)) {
			return true;
		}
		
		let t = tiles[y * sizeX + x + 1];
		let has = t.isWestWall();
		return has;
	}
	
	/*
	 * Used to get the array of tiles visible from tile at (x,y)
	 * Returns Array of Tiles
	 *
	 * TODO: change void to Array
	 */
	method void canSeeFrom(int x, int y) {
		return;
	}

	/*
	 * Checks to see if the next move will place the character in a new
	 * tile.  If so, check to make sure a wall is not in the way.  If
	 * nothing is in the way, move.
	 */
	method boolean canMove(int pos_x, int pos_y, int dir_x, int dir_y) {
		var V2D gridNum;
		var V2D pos;
		var V2D direction;
		var boolean canMove;
		var V2D soonToBePos;
		var V2D soonToBeGridNum;
		var boolean switching;
		var int xmove;
		var int ymove;
		
		let pos = V2D.new(pos_x,pos_y);
		let direction = V2D.new(dir_x,dir_y);

		let switching = false;
		
		let soonToBePos = V2D.empty();
		
		let gridNum = Grid.coordTransform(pos);
		
		do V2D.add(pos, direction, soonToBePos);
		
		let soonToBeGridNum = Grid.coordTransform(soonToBePos);
		
		if(~(V2D.equals(gridNum, soonToBeGridNum))) {
			let switching = true;
			let xmove = soonToBeGridNum.getX() - gridNum.getX();
			let ymove = soonToBeGridNum.getY() - gridNum.getY();
		}
		let canMove = true;
		if(switching) {
		
			if (ymove = 1) {
				// move forwards (North)
				let canMove = ~world.hasNorthWall(gridNum.getX(), gridNum.getY());
			}
			if (ymove = -1) {
				// move backwards (South)
				let canMove = ~world.hasSouthWall(gridNum.getX(), gridNum.getY());
			}
			if (xmove = -1) {
				// move counter-clockwise (West)
				let canMove = ~world.hasWestWall(gridNum.getX(), gridNum.getY());
			}
			if (xmove = 1) {
				// move clockwise (East)
				let canMove = ~world.hasEastWall(gridNum.getX(), gridNum.getY());
			}
		}
		return canMove;
	}
	
	/*
	 * Get the tile  you are currently in, as an array of two numbers
	 * x,y are the world coordinates
	 * IS A STATIC FUNCTION NOW
	 */
	function Array coordTransform(V2D p) {
		var V2D pos;
		let pos = V2D.empty();
		do pos.setX(p.getX() / GRID_SIZE);
		do pos.setY(p.getY() / GRID_SIZE);
		return pos;
	}
	
	/*-------------------- GETTERS --------------------*/
	// No setters for size since it should not change
	method int getSizeX() {
		return sizeX;
	}
	method int getSizeY() {
		return sizeY;
	}
	method int getGoalX() {
		return goalX;
	}
	method int getGoalY() {
		return goalY;
	}
	function int getGridSize() {
		return GRID_SIZE;
	}

	/*-------------------- SETTERS --------------------*/
	method void setGoal(int x, int y) {
		let goalX = x;
		let goalY = y;
		return;
	}
	
	/*-------------------- CLEANUP --------------------*/
	method void dispose() {
		do tiles.dispose();
		do Memory.deAlloc(this);
		return;
	}
}
