/**
This class holds an array of Tiles that make up the maze. This class is how any other class should access the Tiles.
*/

class Grid
{
	
	field Array tiles;
	
	static int GRID_SIZE;
	
	field int sizeX, sizeY;
	
	field int goalX, goalY;
	
	/**
	Constructor for Grid
	int sx: number of tiles in grid east-west
	int sy: number of tiles in grid north-south
	int gx,gy: location of goal spot
	*/
	constructor Grid new(int sx, int sy, int gx, int gy)
	{
		let sizeX = sx;
		let sizeY = sy;
		let goalX = gx;
		let goalY = gy;
		
		let tiles = Array.new(sizeX * sizeY);
		
		//TODO: change this to something else
		let GRID_SIZE=100;
		
		return this;
	}
	
	/**
	Which directions have walls at point(x,y)
	returns a boolean array: [north,east,south,west]
	*/
	method Array getWalls(int x, int y)
	{
		var Tile t;
		let t = tiles[y * sizeX + x];
		var Array walls = Array.new(4);
		let walls[0] = t.isNorthWall();
		let walls[3] = t.isWestWall();
		let southTile = tiles[(y+1) * sizeX + x];
		let walls[2] = southTile.isNorthWall();
		let eastTile = tiles[y * sizeX + x + 1];
		let walls[1] = eastTile.isWestWall();
		return walls;
	}
	
	/**
	Used to get the array of tiles visible from tile at (x,y)
	returns Array of Tiles 
	*/
	method Array canSeeFrom(int x, int y)
	{
	
	}
	
	/**
	Transform teh x,y coordinates inside a tile into world coordinates
	gx,gy: which tile you are in
	tx,ty: position inside tile
	*/
	method Array coordTransform(int gx, int gy, int tx, int ty)
	{
		let newX = gx * GRID_SIZE + tx;
		let newY = gy * GRID_SIZE + ty;
	}
	
	//getters. No setter for size because the size of the maze should not change
	method int getSizeX()
	{
		return sizeX;
	}
	method int getSizeY()
	{
		return sizeY;
	}
	method int getGoalX()
	{
		return goalX;
	}
	method int getGoalY()
	{
		return goalY;
	}
	method void setGoal(int x, y)
	{
		let goalX = x;
		let goalY = y;
		return;
	}
	
	
	//I hope this is the right way to dispose an array.
	method void dispose()
	{
		do tiles.dispose();
		do Memory.deAlloc(this);
		return;
	}
	
	
}
